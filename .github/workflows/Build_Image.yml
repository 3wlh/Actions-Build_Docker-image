name: Build and Image
on:
  repository_dispatch:
  workflow_dispatch:      
    inputs:
      platform:
        description: "Select the platform"
        required: false
        default: "linux/amd64,linux/arm64"
        type: choice
        options:
          - linux/amd64,linux/arm64
          - linux/amd64
          - linux/arm64
          
      image:
        description: "Select the Image"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - NapCat_api
          - PaddleOCR
          
env:
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: true

jobs:
  jod_time:
    name: Acquisition Time
    runs-on: ubuntu-latest
    outputs:
      time: ${{steps.output_time.outputs.time}}
    steps: 
      - name: output Time
        id: output_time
        run: |
          sudo timedatectl set-timezone "${TZ}"
          echo "time=$(date "+%Y.%m.%d_%H%M%S")" >> $GITHUB_OUTPUT


  jobs:
    name: Build for ${{ matrix.platform }}
    needs: jod_time
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{ inputs.image }}
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64,linux/arm64]
    env:
      Time: ${{ needs.jod_time.outputs.time }}
    steps:       
      - name: Check out code
        uses: actions/checkout@v4    
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Initial
        run: |
          sudo timedatectl set-timezone "${TZ}"
          echo "Name=$(echo ${{ inputs.image }} | tr 'A-Z' 'a-z')" >> $GITHUB_ENV

      - name: Buildx and Docker image push
        env:
          DOCKER_REPO: 3wlh/${{ env.Name }}
        run: |
          # cd ${{ inputs.image }}
          # TAG="--tag ${DOCKER_REPO}:$(date "+%Y.%m.%d_%H%M%S")"
          docker buildx build \
            --output "type=image" \
            --platform ${{ matrix.platform }} \
            --tag ${DOCKER_REPO}:latest \
            --file ./Dockerfile \
            . \
            --load

      - name: docker images
        run: |
          test -d "/tmp/images" || mkdir -p "/tmp/images"
          platform="$(echo ${{ matrix.platform }} | tr '/' '_')"
          echo "arch=${platform}"  >> $GITHUB_OUTPUT
          file="/tmp/images/${{ env.Name }}-${platform}.tar"
          echo "${file} | 3wlh/${{ env.Name }} "
          docker images
          docker save -o ${file} 3wlh/${{ env.Name }}
          ls "/tmp/images"
      
      - name: Upload to bin directory
        uses: actions/upload-artifact@main
        if: ${{env.UPLOAD_BIN_DIR}} == 'true'
        with:
          name: ${{ env.Name }}-${{ env.arch }}
          path: /tmp/images

      - name: Upload to Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.Time }}
          files: /images/*